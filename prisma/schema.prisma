generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String   @unique @id
  email          String   @unique
  imageUrl       String   @db.Text
  coverImageUrl  String?  @db.Text
  name           String?  @db.Text
  username       String   @unique @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bio            String?
  isAdmin        Boolean  @default(false)

  notifications  Notifications[]
  watchHistory   WatchHistory[]
  collection     Collection[]

  subscriptions Subscription[]

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  comments   Comment[]
  likes      Like[]
  dislikes   Dislike[]
  replies    Reply[]

  PushSubscription PushSubscription[]

  @@index([username])
}

model Subscription {
  id        String   @unique @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  animeId   String

  @@unique([userId, animeId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  animeId   String
  episodeId String

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  likes     Like[]
  dislikes  Dislike[]
  replies   Reply[]

  @@index([animeId, episodeId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  commentId String?  @map("comment_id")
  replyId   String?  @map("reply_id")

  user      User     @relation(fields: [userId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id], map: "Like_comment_fk")
  reply     Reply?   @relation(fields: [replyId], references: [id], map: "Like_reply_fk")
}

model Dislike {
  id        String   @id @default(uuid())
  userId    String
  commentId String?  @map("comment_id")
  replyId   String?  @map("reply_id")

  user      User     @relation(fields: [userId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id], map: "Dislike_comment_fk")
  reply     Reply?   @relation(fields: [replyId], references: [id], map: "Dislike_reply_fk")
}

model Reply {
  id         String   @id @default(uuid())
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     String
  commentId  String

  user       User     @relation(fields: [userId], references: [id])
  comment    Comment  @relation(fields: [commentId], references: [id])
  likes      Like[]
  dislikes   Dislike[]

  @@index([commentId])
}

enum NotificationType {
  EPISODE_AIR
}

model Notifications {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  image     String
  url       String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PushSubscription {
  id        Int    @id @default(autoincrement())
  endpoint  String
  keys      Json
  createdAt DateTime @default(now())
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@index([endpoint])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model WatchHistory {
  id           String   @id @default(cuid())
  userId       String
  animeId      String
  episodeId    String
  lastWatched  DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([animeId])
  @@index([episodeId])

  @@unique([userId, animeId, episodeId])
}

enum Status {
  WATCHING
  COMPLETED
  ON_HOLD
  DROPPED
  PLAN_TO_WATCH
}

model Collection {
  id        String @id @default(cuid())
  userId    String
  animeId   String
  status    Status

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([animeId])
  @@unique([userId, animeId])
}

enum WorkerType {
  EPI_NOTIFY
  SYNC
}

model Worker {
  id        String   @id @default(cuid())
  type      WorkerType
  lastRun   DateTime
  pointer   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([pointer])
  @@unique([type, pointer])
}